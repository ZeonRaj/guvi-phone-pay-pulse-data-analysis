# -*- coding: utf-8 -*-
"""zeon phone pe.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zT5VU6AeY2qejdYcPjVYQZGFTpZEHhmj
"""

import pandas as pd
import json
import os
import glob

!pip install pygithub

!pip install gitpython

from github import Github
import git

# First, create a Github instance using your access token:
!git clone https://github.com/PhonePe/pulse.git

"""***Code to extract tranaction type and Count***"""

#the path to get the staates
# os.listdir() is used to retrieve a list of files and directories in the path directory
path="pulse/data/aggregated/transaction/country/india/state/"
statelist=os.listdir(path)
statelist  # to print the list in states

#body of the program to fine tranaction type and count
column = []

for state in statelist:
    state_path = os.path.join(path, state)
    years = os.listdir(state_path)
    
    for year in years:
        year_path = os.path.join(state_path, year)
        quarters = glob.glob(os.path.join(year_path, '*.json'))
        
        for quarter_path in quarters:
            with open(quarter_path, 'r') as f:
                data = json.load(f)
                
                for transaction in data['data']['transactionData']:
                    row = {
                        'State': state,
                        'Year': year,
                        'Quarter': int(os.path.splitext(os.path.basename(quarter_path))[0]),
                        'Transaction_type': transaction['name'],
                        'Transaction_count': transaction['paymentInstruments'][0]['count'],
                        'Transaction_amount': transaction['paymentInstruments'][0]['amount']
                    }
                    column.append(row)

df = pd.DataFrame(column)
df

#for colleccting data in CSV
df.to_csv("transaction_type_count")

import matplotlib.pyplot as plt

# Group the DataFrame by transaction type and sum the counts
type_counts = df.groupby('Transaction_type')['Transaction_count'].sum()

# Create a pie chart
plt.pie(type_counts, labels=type_counts.index, autopct='%1.1f%%')
plt.title('Transaction Types and Counts')
plt.show()

"""**Code to extract User Brand and Brand percentage**"""

#file location 
path="pulse/data/aggregated/user/country/india/state/"
statelist=os.listdir(path)
statelist

column = []

for state in statelist:
    state_path = os.path.join(path, state)
    years = os.listdir(state_path)
    
    for year in years:
        year_path = os.path.join(state_path, year)
        quarters = glob.glob(os.path.join(year_path, '*.json'))
        
        for quarter_path in quarters:
            with open(quarter_path, 'r') as f:
                data = json.load(f)
                
                if data['data']['usersByDevice'] is None:
                    continue
                
                for user in data['data']['usersByDevice']:
                    row = {
                        'State': state,
                        'Year': year,
                        'Quarter': int(os.path.splitext(os.path.basename(quarter_path))[0]),
                        'User_Brand': user['brand'],
                        'Brand_Count': user['count'],
                        'Brand_Percentage': user['percentage']
                    }
                    column.append(row)

df = pd.DataFrame(column)
df

df.to_csv("brand count and user.csv")

import matplotlib.pyplot as plt

# Group data by User_Brand and sum Brand_Count
brand_counts = df.groupby('User_Brand')['Brand_Count'].sum()

# Create pie chart
plt.pie(brand_counts.values, labels=brand_counts.index, autopct='%1.1f%%')
plt.title('User Brands')
plt.show()

"""**Code to extract Hover Area and Hover Count**"""

path="pulse/data/map/transaction/hover/country/india/state/"
statelist=os.listdir(path)
statelist

column = []

for state in statelist:
    state_path = os.path.join(path, state)
    years = os.listdir(state_path)
    
    for year in years:
        year_path = os.path.join(state_path, year)
        quarters = os.listdir(year_path)
        
        for quarter in quarters:
            quarter_path = os.path.join(year_path, quarter)
            with open(quarter_path, 'r') as f:
                data = json.load(f)
                
                for hover_data in data['data']['hoverDataList']:
                    row = {
                        'State': state,
                        'Year': year,
                        'Quarter': int(os.path.splitext(quarter)[0]),
                        'Hover_area': hover_data['name'],
                        'Hover_count': hover_data['metric'][0]['count'],
                        'Hover_amount': hover_data['metric'][0]['amount']
                    }
                    column.append(row)

df = pd.DataFrame(column)
df

df.to_csv("hover_area_count.csv")

import matplotlib.pyplot as plt

# Group the DataFrame by State and sum the Hover_count column
state_counts = df.groupby('State')['Hover_count'].sum()

# Create a bar chart with the State labels and the corresponding count values
plt.bar(state_counts.index, state_counts.values)

plt.xticks(rotation='vertical')

# Add a title and axis labels
plt.title('Hover Counts by State')
plt.xlabel('State')
plt.ylabel('Hover Count')

# Display the chart
plt.show()

"""**Code to extract districts and registerd user**"""

path="pulse/data/map/user/hover/country/india/state/"
statelist=os.listdir(path)
statelist

clm = []

for state in statelist:
    state_path = os.path.join(path, state)
    years = os.listdir(state_path)
    
    for year in years:
        year_path = os.path.join(state_path, year)
        quarters = glob.glob(os.path.join(year_path, '*.json'))
        
        for quarter_path in quarters:
            with open(quarter_path, 'r') as f:
                data = json.load(f)
                
                for district, reg_users in data['data']['hoverData'].items():
                    row = {
                        'State': state,
                        'Year': year,
                        'Quarter': int(os.path.splitext(os.path.basename(quarter_path))[0]),
                        'Disrict': district,
                        'Reg_users': reg_users['registeredUsers']
                    }
                    clm.append(row)

df = pd.DataFrame(clm)
df

df.to_csv("user_state.csv")

import matplotlib.pyplot as plt

# Group the DataFrame by district and sum the registered users column
district_counts = df.groupby('Disrict')['Reg_users'].sum()

# Create a bar plot with the district labels and the corresponding count values
fig, ax = plt.subplots()
ax.bar(district_counts.index, district_counts.values)

# Add axis labels and a title
ax.set_xlabel('District')
ax.set_ylabel('Registered Users')
ax.set_title('Registered Users by District')

# Rotate the x-axis labels for better readability
plt.xticks(rotation=90)

# Display the plot
plt.show()

"""**Code to extract top TRanaction data**"""

path="pulse/data/top/user/country/india/state/"
statelist=os.listdir(path)
statelist

column={'State':[], 'Year':[],'Quater':[],'District_name':[], 'Reguser':[]}
for i in statelist:
    p_i=path+i+"/"
    Agg_yr=os.listdir(p_i)    
    for j in Agg_yr:
        p_j=p_i+j+"/"
        Agg_yr_list=os.listdir(p_j)        
        for k in Agg_yr_list:
            p_k=p_j+k
            Data=open(p_k,'r')
            D=json.load(Data)
            for z in D['data']['districts']:
              DisName=z["name"]
              DisReg_user=z["registeredUsers"]
              #Pin_name=z["name"]
              #pin_reguser=z["registeredUsers"]
              column['District_name'].append(DisName)
              column['Reguser'].append(DisReg_user)
              #clm['Pinname'].append(Pin_name)
              #clm['pinuser'].append(pin_reguser)
              column['State'].append(i)
              column['Year'].append(j)
              column['Quater'].append(int(k.strip('.json')))
#Succesfully created a dataframe
pd.DataFrame(clm)
df=pd.DataFrame(clm)
df

df.to_csv("top_transactions.csv")

"""**Code to extract the top number of users**"""

path="pulse/data/top/user/country/india/state/"
statelist=os.listdir(path)
statelist

clm={'State':[], 'Year':[],'Quater':[],'District_name':[], 'Reguser':[]}
for i in statelist:
    p_i=path+i+"/"
    Agg_yr=os.listdir(p_i)    
    for j in Agg_yr:
        p_j=p_i+j+"/"
        Agg_yr_list=os.listdir(p_j)        
        for k in Agg_yr_list:
            p_k=p_j+k
            Data=open(p_k,'r')
            D=json.load(Data)
            for z in D['data']['districts']:
              DisName=z["name"]
              DisReg_user=z["registeredUsers"]
              #Pin_name=z["name"]
              #pin_reguser=z["registeredUsers"]
              clm['District_name'].append(DisName)
              clm['Reguser'].append(DisReg_user)
              #clm['Pinname'].append(Pin_name)
              #clm['pinuser'].append(pin_reguser)
              clm['State'].append(i)
              clm['Year'].append(j)
              clm['Quater'].append(int(k.strip('.json')))
#Succesfully created a dataframe
pd.DataFrame(clm)
df=pd.DataFrame(clm)
df

#storing the dataframe
df.to_csv("top_users.csv")

import matplotlib.pyplot as plt

# Group the data by state and year, and calculate the total registered users for each group
df_grouped = df.groupby(['State', 'Year'])['Reguser'].sum().reset_index()

# Create a bar graph with State on the x-axis and Total Registered Users on the y-axis
plt.bar(df_grouped['State'], df_grouped['Reguser'])

# Add labels and title
plt.xlabel('State')
plt.ylabel('Total Registered Users')
plt.title('Registered Users by State and Year')

# Rotate the x-axis labels for readability
plt.xticks(rotation=90)

# Display the graph
plt.show()

